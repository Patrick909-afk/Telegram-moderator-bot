import logging
from telegram import Update, ChatMember, Message
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from core.analyze import analyze_conflict
from datetime import datetime, timedelta
import asyncio

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"
OWNER_ID = 1609956648
MODERATORS = [1609956648]

# üí¨ –°–æ—Å—Ç–æ—è–Ω–∏—è
active_dispute = False
dispute_users = set()
dispute_log = []
last_activity = None
AUTO_CLOSE_SECONDS = 300

# ‚öôÔ∏è –õ–æ–≥–≥–µ—Ä
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# üë• –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø ‚Äî –±–æ—Ç-—Å—É–¥—å—è. –ò—Å–ø–æ–ª—å–∑—É–π /spor @user, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ø–æ—Ä.")

async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢–≤–æ–π ID: {update.effective_user.id}")

async def youid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        target_id = update.message.reply_to_message.from_user.id
        await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_id}")
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ ID.")

async def spor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_dispute, dispute_users, dispute_log, last_activity

    if active_dispute:
        await update.message.reply_text("–°–ø–æ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–µ–º —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–ø–æ—Ä.")
        return

    user1 = update.effective_user.id
    user2 = update.message.reply_to_message.from_user.id

    if user1 in MODERATORS and user2 in MODERATORS:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—Ä—ã –º–µ–∂–¥—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è.")
        return

    dispute_users = {user1, user2}
    active_dispute = True
    dispute_log = []
    last_activity = datetime.utcnow()

    await update.message.reply_text("‚öñÔ∏è –°–ø–æ—Ä –Ω–∞—á–∞—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    asyncio.create_task(check_dispute_timeout(context))

async def end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_dispute, dispute_users, dispute_log
    if update.effective_user.id not in dispute_users:
        await update.message.reply_text("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Å–ø–æ—Ä–µ.")
        return

    await update.message.reply_text("–°–ø–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω.")
    dispute_users = set()
    dispute_log = []
    active_dispute = False

async def mend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in MODERATORS:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–æ—Ä.")
        return

    global active_dispute, dispute_users, dispute_log
    active_dispute = False
    dispute_users = set()
    dispute_log = []
    await update.message.reply_text("üõë –°–ø–æ—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω.")

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in dispute_users:
        await update.message.reply_text("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Å–ø–æ—Ä–µ.")
        return

    if not dispute_log:
        await update.message.reply_text("–õ–æ–≥ –ø—É—Å—Ç.")
        return

    await update.message.reply_text("üìú –õ–æ–≥:\n" + "\n".join(dispute_log[-10:]))

async def mlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in MODERATORS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if update.message.reply_to_message:
        uid = update.message.reply_to_message.from_user.id
    elif context.args:
        try:
            uid = int(context.args[0])
        except:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")
            return
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    lines = [line for line in dispute_log if str(uid) in line]
    if not lines:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await update.message.reply_text("üìÑ MLog:\n" + "\n".join(lines[-10:]))

async def kick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in MODERATORS:
        await update.message.reply_text("–¢—ã –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.")
        return

    if update.message.reply_to_message:
        target = update.message.reply_to_message.from_user.id
        try:
            await context.bot.ban_chat_member(update.effective_chat.id, target)
            await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–∏–∫–Ω—É—Ç.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_activity

    if not active_dispute or update.effective_user.id not in dispute_users:
        return

    last_activity = datetime.utcnow()

    msg = f"[{update.effective_user.id}] {update.message.text}"
    dispute_log.append(msg)

    if any(str(uid) in update.message.text for uid in map(str, MODERATORS)):
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—Ä—ã —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è.")
        return

    verdict = analyze_conflict(update.message.text)
    await update.message.reply_text(f"üìú –í–µ—Ä–¥–∏–∫—Ç:\n{verdict}")

# ‚è≥ –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ
async def check_dispute_timeout(context: ContextTypes.DEFAULT_TYPE):
    global last_activity, active_dispute
    while active_dispute:
        if datetime.utcnow() - last_activity > timedelta(seconds=AUTO_CLOSE_SECONDS):
            active_dispute = False
            await context.bot.send_message(chat_id=context.application.bot_data["chat_id"], text="‚è± –°–ø–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
            break
        await asyncio.sleep(30)

# üöÄ MAIN
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.bot_data["chat_id"] = OWNER_ID  # –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("myid", myid))
    app.add_handler(CommandHandler("youid", youid))
    app.add_handler(CommandHandler("spor", spor))
    app.add_handler(CommandHandler("end", end))
    app.add_handler(CommandHandler("mend", mend))
    app.add_handler(CommandHandler("log", log))
    app.add_handler(CommandHandler("mlog", mlog))
    app.add_handler(CommandHandler("kick", kick))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())