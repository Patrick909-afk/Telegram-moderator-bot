import os
import asyncio
import logging
from datetime import datetime, timedelta
from telegram import Update, ChatMember, MessageEntity
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, CallbackContext
)
from core.analyze import analyze_conflict

TOKEN = os.environ.get("TOKEN")
OWNER_ID = int(os.environ.get("OWNER_ID", 1609956648))  # Fallback –Ω–∞ —Ç–≤–æ–π ID
MODERATORS = [OWNER_ID]  # –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å
MAX_ACTIVE_DISPUTES = 5

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–æ—Ä–æ–≤
active_disputes = {}  # chat_id: {users, log, last_activity}
logging.basicConfig(level=logging.INFO)

# –ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–æ—Ä–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É
async def monitor_disputes(app):
    while True:
        now = datetime.utcnow()
        for chat_id in list(active_disputes.keys()):
            last = active_disputes[chat_id]['last_activity']
            if now - last > timedelta(minutes=5):
                await app.bot.send_message(chat_id=chat_id, text="üïí –°–ø–æ—Ä –∑–∞–∫—Ä—ã—Ç –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
                del active_disputes[chat_id]
        await asyncio.sleep(30)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë®‚Äç‚öñÔ∏è –ë–æ—Ç –°—É–¥—å—è –≥–æ—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ /spor @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–ø–æ—Ä–∞.")

async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî –í–∞—à ID: {update.effective_user.id}")

async def youid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        target = update.message.reply_to_message.from_user
        await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target.id}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def spor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in active_disputes:
        await update.message.reply_text("‚ö†Ô∏è –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç —Å–ø–æ—Ä.")
        return
    if len(active_disputes) >= MAX_ACTIVE_DISPUTES:
        await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤.")
        return
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞.")
        return

    u1 = update.effective_user.id
    u2 = update.message.reply_to_message.from_user.id
    if u1 in MODERATORS and u2 in MODERATORS:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—Ä—ã –º–µ–∂–¥—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.")
        return

    active_disputes[chat_id] = {
        'users': [u1, u2],
        'log': [],
        'last_activity': datetime.utcnow()
    }
    await update.message.reply_text("üß® –°–ø–æ—Ä –Ω–∞—á–∞—Ç! –ü–∏—à–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in active_disputes:
        active_disputes[chat_id]['log'].append(f"{update.effective_user.first_name}: {update.message.text}")
        active_disputes[chat_id]['last_activity'] = datetime.utcnow()

async def end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in active_disputes:
        await update.message.reply_text("‚ö†Ô∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä–∞.")
        return
    users = active_disputes[chat_id]['users']
    if update.effective_user.id not in users:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞.")
        return

    log = "\n".join(active_disputes[chat_id]['log'])
    verdict = analyze_conflict(log)
    await update.message.reply_text(f"üìú –í–µ—Ä–¥–∏–∫—Ç:\n{verdict}")
    del active_disputes[chat_id]

async def mend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å–ø–æ—Ä—ã –≤—Ä—É—á–Ω—É—é.")
    chat_id = update.effective_chat.id
    if chat_id in active_disputes:
        del active_disputes[chat_id]
        await update.message.reply_text("‚úÖ –°–ø–æ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä–∞.")

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in active_disputes and update.effective_user.id in active_disputes[chat_id]['users']:
        log = "\n".join(active_disputes[chat_id]['log'])
        await update.message.reply_text(f"üóíÔ∏è –õ–æ–≥:\n{log}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –õ–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä–∞.")

async def mlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in MODERATORS:
        return await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
    if update.message.reply_to_message:
        target_id = update.message.reply_to_message.from_user.id
    elif context.args:
        try:
            target_id = int(context.args[0])
        except ValueError:
            return await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
    else:
        return await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    for cid, info in active_disputes.items():
        if target_id in info['users']:
            log = "\n".join(info['log'])
            return await update.message.reply_text(f"üóíÔ∏è –õ–æ–≥ —Å–ø–æ—Ä–∞ —Å ID {target_id}:\n{log}")
    await update.message.reply_text("‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def kick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in MODERATORS:
        return await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∫–∏–∫–∞—Ç—å.")
    if not update.message.reply_to_message:
        return await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    user_id = update.message.reply_to_message.from_user.id
    try:
        await context.bot.ban_chat_member(chat_id=update.effective_chat.id, user_id=user_id)
        await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("myid", myid))
    app.add_handler(CommandHandler("youid", youid))
    app.add_handler(CommandHandler("spor", spor))
    app.add_handler(CommandHandler("end", end))
    app.add_handler(CommandHandler("mend", mend))
    app.add_handler(CommandHandler("log", log))
    app.add_handler(CommandHandler("mlog", mlog))
    app.add_handler(CommandHandler("kick", kick))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.job_queue.run_repeating(lambda c: monitor_disputes(app), interval=60)
    app.run_polling()

if __name__ == '__main__':
    main()