import asyncio
from telegram import Update, User
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from core.analyze import analyze_conflict

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"
OWNER_ID = 1609956648
MODERATORS = [1609956648]

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã: (user1_id, user2_id) -> [messages...]
active_disputes = {}
last_active = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø ‚Äî –±–æ—Ç-—Å—É–¥—å—è. –ò—Å–ø–æ–ª—å–∑—É–π /spor @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ø–æ—Ä.")

# /myid
async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢–≤–æ–π ID: {update.effective_user.id}")

# /youid
async def youid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        uid = update.message.reply_to_message.from_user.id
        await update.message.reply_text(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {uid}")
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞.")

# /spor
async def spor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, —Å –∫–µ–º —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–ø–æ—Ä.")
        return

    user1 = update.effective_user.id
    user2 = update.message.reply_to_message.from_user.id

    if user1 in MODERATORS and user2 in MODERATORS:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—Ä –º–µ–∂–¥—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return

    key = tuple(sorted((user1, user2)))
    if key in active_disputes:
        await update.message.reply_text("–°–ø–æ—Ä —É–∂–µ –∏–¥—ë—Ç.")
        return

    active_disputes[key] = []
    last_active[key] = asyncio.get_event_loop().time()
    await update.message.reply_text("‚úÖ –°–ø–æ—Ä –Ω–∞—á–∞—Ç. –ü–∏—à–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!")

# /log
async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user1 = update.effective_user.id
    for (u1, u2), messages in active_disputes.items():
        if user1 in (u1, u2):
            log_text = "\n".join(messages[-10:])
            await update.message.reply_text(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{log_text}")
            return
    await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä–∞.")

# /mlog
async def mlog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in MODERATORS:
        return await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    uid = None
    if update.message.reply_to_message:
        uid = update.message.reply_to_message.from_user.id
    elif context.args:
        try:
            uid = int(context.args[0])
        except ValueError:
            return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")

    if uid:
        for (u1, u2), messages in active_disputes.items():
            if uid in (u1, u2):
                log_text = "\n".join(messages[-10:])
                return await update.message.reply_text(f"üìù –õ–æ–≥ —Å–ø–æ—Ä–∞:\n{log_text}")
        return await update.message.reply_text("–°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await update.message.reply_text("–£–∫–∞–∂–∏ ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# /end
async def end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    for key in list(active_disputes.keys()):
        if uid in key:
            verdict = analyze_conflict("\n".join(active_disputes[key]))
            del active_disputes[key]
            del last_active[key]
            await update.message.reply_text(f"‚úÖ –°–ø–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω.\nüìú –í–µ—Ä–¥–∏–∫—Ç: {verdict}")
            return
    await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä–∞.")

# /mend
async def mend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in MODERATORS:
        return await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    if update.message.reply_to_message:
        uid = update.message.reply_to_message.from_user.id
        for key in list(active_disputes.keys()):
            if uid in key:
                del active_disputes[key]
                del last_active[key]
                return await update.message.reply_text("–°–ø–æ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–ø–æ—Ä —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# /kick
async def kick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in MODERATORS:
        return await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    if update.message.reply_to_message:
        try:
            await update.message.chat.ban_member(update.message.reply_to_message.from_user.id)
            await update.message.reply_text("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á—ë–Ω.")
        except:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å.")
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    for key in active_disputes:
        if uid in key:
            active_disputes[key].append(f"{uid}: {update.message.text}")
            last_active[key] = asyncio.get_event_loop().time()
            break

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
async def check_inactivity(app):
    while True:
        now = asyncio.get_event_loop().time()
        for key in list(last_active):
            if now - last_active[key] > 300:  # 5 –º–∏–Ω—É—Ç
                del active_disputes[key]
                del last_active[key]
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("myid", myid))
    app.add_handler(CommandHandler("youid", youid))
    app.add_handler(CommandHandler("spor", spor))
    app.add_handler(CommandHandler("log", log))
    app.add_handler(CommandHandler("mlog", mlog))
    app.add_handler(CommandHandler("end", end))
    app.add_handler(CommandHandler("mend", mend))
    app.add_handler(CommandHandler("kick", kick))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))

    app.create_task(check_inactivity(app))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())